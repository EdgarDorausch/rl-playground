{"version":3,"sources":["Agent.ts","Utils.ts","Algorith.ts","Maze.ts","RenderHandler.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Agent","startCell","maze","algorithm","state","mazeDim","this","length","init","action","nextState","getNeighbor","updateParams","chooseAction","takeAction","translate","x","y","visibility","sleep","milliseconds","Promise","resolve","setTimeout","L2Norm","Math","sqrt","chooseRandomArrayElement","a","len","floor","random","directionList","TemporalDifferenceLearning","discountFactor","learningRate","explorationFactor","agent","Error","valuedActions","map","value","Number","NEGATIVE_INFINITY","maxValue","max","console","log","filter","chooseRandomAction","chooseGreedyAction","newVal","reward","colorScale","d3","domain","AbstractMazeCell","position","_x","_y","direction","newPos","newX","newY","checkPosition","neighbor","SolidMazeCell","MazeCell","policy","q","north","south","west","east","viewMode","RenderHandler","cellDim","cellSize","cellPadding","cellStriding","svgSize","svg","doTimeTravel","doStartNewEpisode","stepCounter","stepCounterDOMElem","append","attr","style","document","getElementById","innerHTML","toString","selectAll","remove","columns","data","enter","d","i","cellGroup","getColor","cs","getTriangleColor","showTriangles","resetPosition","doStep","setup","update","draw","App","renderHandler","mazeStr","startPos","targetPos","char","charAt","Array","fill","_","getMazeCell","constructMaze","className","onChange","event","target","options","selectedIndex","text","type","onClick","id","start","then","React","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d14ca2ee.chunk.js","sourcesContent":["import {AbstractMazeCell, MazeCell} from './Maze';\nimport {chooseRandomArrayElement, ViewMode, directionList, Direction} from './Utils';\nimport { Algorithm } from './Algorith';\n\nexport class Agent {\n  startCell: MazeCell;\n  state: MazeCell;\n  maze: AbstractMazeCell[][];\n  mazeDim: [number, number];\n\n\n  constructor(startCell: MazeCell, maze: AbstractMazeCell[][], private algorithm: Algorithm) {\n    this.startCell = startCell;\n    this.state = startCell;\n    this.maze = maze;\n    this.mazeDim = [maze[0].length, maze.length];\n    this.algorithm.init(this.maze, this);\n  }\n  \n  \n  takeAction(action: Direction) {\n    let nextState = this.state.getNeighbor(action);\n    \n    if(nextState === null){\n      // console.log(`Cant take action: ${action};`);\n      nextState = this.state;\n    }\n\n    this.algorithm.updateParams(nextState)\n    \n    this.state = nextState;\n  }\n  \n  doStep() {\n    const action = this.algorithm.chooseAction();\n    this.takeAction(action);\n  }\n  \n  resetPosition() {\n    this.state = this.startCell;\n  }\n}","// Helper functions\n\nexport function translate(x: number, y: number): string {\n  return `translate(${x},${y})`\n}\n\nexport function visibility(visibility: boolean) {\n  return visibility ? 'visible' : 'hidden';\n}\n\nexport function sleep(milliseconds: number): Promise<void> {\n   return new Promise(resolve => setTimeout(resolve, milliseconds));\n}\n\nexport function L2Norm(x: number, y: number): number {\n  return Math.sqrt(x*x + y*y);\n}\n\nexport function chooseRandomArrayElement<T>(a: T[]): T {\n  const len = a.length;\n  const idx = Math.floor(Math.random() * len);\n  return a[idx];\n}\n\nexport type ViewMode = 'simple' | 'reward' | 'value' | 'q-function' | 'policy';\nexport type Direction = 'north' | 'east' | 'west' | 'south';\nexport const directionList: Direction[] = ['north' , 'east' , 'west' , 'south'];","import { Maze, MazeCell } from './Maze';\nimport { directionList, chooseRandomArrayElement, Direction } from './Utils';\nimport { Agent } from './Agent';\n\n\n\nexport interface Algorithm {\n  init(maze: Maze, agent: Agent): void;\n  chooseAction(): Direction;\n  updateParams(nextState: MazeCell): void;\n  startNewEpisode(): void;\n  endEpisode(): void;\n}\n\n\nexport class TemporalDifferenceLearning implements Algorithm {\n  private maze: Maze|null = null;\n  private agent: Agent|null = null;\n\n  constructor(\n    private discountFactor: number,\n    private learningRate: number,\n    private explorationFactor: number,\n  ) {}\n\n  init(maze: Maze, agent: Agent) {\n    this.maze = maze;\n    this.agent = agent;\n  }\n    \n  private chooseGreedyAction(): Direction {\n    if(this.agent === null)\n      throw new Error();\n\n    if(this.maze === null)\n      throw new Error();\n\n    const valuedActions = directionList.map(action => {\n      if(this.agent === null)\n        throw new Error();\n\n      const nextState = this.agent.state.getNeighbor(action);\n      \n      const value = nextState !== null ? \n        nextState.value:\n        Number.NEGATIVE_INFINITY;\n      \n      return {action, value};\n    });\n    \n    const maxValue = Math.max(...valuedActions.map(action=>action.value))\n    if(maxValue === Number.NEGATIVE_INFINITY) {\n      console.log(valuedActions)\n      throw new Error('Cant choose greedy action! Deadlock!');\n    }\n    \n    const maxActions = valuedActions.filter(action => action.value === maxValue);\n    const randomValuedAction = chooseRandomArrayElement(maxActions);\n\n    return randomValuedAction.action;\n  }\n  \n  private chooseRandomAction(): Direction {\n    return chooseRandomArrayElement(directionList);\n  }\n  \n  chooseAction(): Direction {\n    if(Math.random() < this.explorationFactor) {\n      return this.chooseRandomAction();\n    } else {\n      return this.chooseGreedyAction();\n    }\n  }\n\n  updateParams(nextState: MazeCell) {\n    if(this.agent === null)\n      throw new Error();\n\n    if(this.maze === null)\n      throw new Error();\n\n    const newVal = (1-this.learningRate)*this.agent.state.value + \n      this.learningRate*(\n        nextState.reward +\n        this.discountFactor*nextState.value\n      )\n    \n    this.agent.state.value = newVal;\n  }\n\n  startNewEpisode() {}\n\n  endEpisode() {}\n\n}","import * as d3 from 'd3';\nimport {Agent} from './Agent';\nimport {ViewMode, Direction, L2Norm, directionList, chooseRandomArrayElement} from './Utils';\nimport { TemporalDifferenceLearning } from './Algorith';\n\nconst colorScale = d3.scaleSequential(d3.interpolatePuOr).domain([0,1]);\n\nexport type Maze = AbstractMazeCell[][];\n\n\nexport abstract class AbstractMazeCell {\n  maze: Maze;\n  x: number;\n  y: number;\n  mazeDim: [number, number];\n  \n  constructor(position: [number, number], maze: Maze) {\n    this.x = position[0];\n    this.y = position[1];\n    this.maze = maze;\n    this.mazeDim = [maze[0].length, maze.length];\n  }\n  \n  /**\n   * Checks if a maze position is valid\n   */\n  private checkPosition(_x: number,_y: number) {\n    return 0 <= _x && _x < this.mazeDim[0] && // 0 <= x < dim_x\n      0 <= _y && _y < this.mazeDim[1];       // 0 <= y < dim_y\n  }\n  \n  /**\n   * Returning the neighbor cell according to the given direction.\n   * `null` is returned if there is no neighbor inside the maze or the neighbor is a solid cell\n   */\n  getNeighbor(direction: Direction): MazeCell|null {\n    let newPos;\n    const x = this.x;\n    const y = this.y;\n    switch(direction) {\n      case 'north':\n        newPos = [x, y-1];\n        break;\n      case 'east':\n        newPos = [1+x, y];\n        break;\n      case 'south':\n        newPos = [x, y+1];\n        break;\n      case 'west':\n        newPos = [x-1, y];\n        break;\n      default:\n        throw new Error(`Unknown direction: ${direction}`)\n    }\n    \n    const [newX,newY] = newPos;\n    \n    if(!this.checkPosition(newX,newY)){\n      return null;\n    }\n    \n    const neighbor = this.maze[newX][newY];\n    \n    if(neighbor instanceof SolidMazeCell)\n      return null;\n      \n    return neighbor as MazeCell;\n  }\n\n  abstract getColor(viewMode: ViewMode): string\n  abstract getTriangleColor(viewMode: ViewMode, direction: Direction): string\n  abstract showTriangles(viewMode: ViewMode): boolean\n}\n\ntype Q = {[direction in Direction]: number};\n\nexport class MazeCell extends AbstractMazeCell {\n  reward: number;\n  x: number;\n  y: number;\n  value: number;\n  policy: Direction;\n  q: Q;\n\n  constructor(reward: number , position: [number, number], maze: Maze) {\n    super(position, maze)\n    this.x = position[0];\n    this.y = position[1]\n    this.reward = reward;\n    this.value = 0;\n    this.policy = chooseRandomArrayElement(directionList);\n    this.q = {north: 0, south: 0, west: 0, east: 0};\n  }\n  \n  getColor(viewMode: ViewMode) {    \n    switch(viewMode){\n      case 'reward':\n        return colorScale(this.reward);\n      case 'value':\n        return colorScale(this.value);\n      case 'simple':\n      case 'policy':\n      case 'q-function':\n        return 'darkgray';\n    }\n  }\n\n  getTriangleColor(viewMode: ViewMode, direction: Direction) {\n    switch(viewMode) {\n      case 'policy':\n        return direction === this.policy ? '#222' : '#eee';\n      case 'q-function':\n        return colorScale(this.q[direction]);\n      case 'reward':\n      case 'simple':\n      case 'value':\n        return 'red';\n    }\n  }\n\n  showTriangles(viewMode: ViewMode) {\n    switch(viewMode) {\n      case 'policy':\n      case 'q-function':\n        return true;\n      case 'reward':\n      case 'simple':\n      case 'value':\n        return false;\n    }\n  }\n}\n\n\n\n\nexport class SolidMazeCell extends AbstractMazeCell {\n  getColor() {\n    return '#444';\n  }\n  getTriangleColor() {\n    return '#444';\n  }\n  showTriangles() {\n    return false;\n  }\n}\n\n\n\n\nexport function constructMaze(mazeStr: string[]): {maze: Maze, agent: Agent} {\n  let startPos = [0,0];\n  let targetPos = [0,0];\n  const cellDim = 16;\n  \n  for(let x = 0; x < 16; x++){\n    for(let y = 0; y < 16; y++) {\n      const char = mazeStr[y].charAt(x);\n      \n      if (char === '€')\n        targetPos = [x,y];\n      \n      if(char === '$')\n        startPos = [x,y];\n    }\n  }\n  \n  let maze = new Array(cellDim).fill(null).map(\n    (_, x) => new Array(cellDim).fill(42));\n  \n  const getMazeCell = (x: number, y: number) => {\n    const char = mazeStr[y].charAt(x);\n    if(char === '#')\n      return new SolidMazeCell([x,y], maze)\n    return new MazeCell(\n      1 - L2Norm(x-targetPos[0], y-targetPos[1])/L2Norm(16,16),//char === '€' ? 10 : -0,\n      [x,y],\n      maze\n    );\n  }\n  \n  for(let x = 0; x < 16; x++){\n    for(let y = 0; y < 16; y++) {\n      maze[x][y] = getMazeCell(x,y);\n    }\n  }\n  \n  const agent = new Agent(\n    maze[startPos[0]][startPos[1]],\n    maze,\n    new TemporalDifferenceLearning(\n      0.25,\n      0.5,\n      0.6\n    )\n  );\n  \n  return {maze, agent};  \n}","import { translate, visibility, ViewMode, sleep } from './Utils';\nimport { Agent } from './Agent';\nimport { AbstractMazeCell } from './Maze';\nimport * as d3 from 'd3';\n\nconst westTrianglePoints =  (cs: number) => `0,0         ${cs/2},${cs/2} 0,${cs}`;\nconst northTrianglePoints = (cs: number) => `0,0         ${cs/2},${cs/2} ${cs},0`;\nconst eastTrianglePoints =  (cs: number) => `${cs},${cs} ${cs/2},${cs/2} ${cs},0`;\nconst southTrianglePoints = (cs: number) => `${cs},${cs} ${cs/2},${cs/2} 0,${cs}`;\n\n\nexport class RenderHandler {\n  private cellStriding: number;\n  private svgSize: number;\n  private svg: d3.Selection<any, any, HTMLElement, any>|null = null;\n\n  public doTimeTravel =  false;\n  public viewMode =  'value' as ViewMode;\n  public doStartNewEpisode =  false;\n  \n  private stepCounter = 0;\n  private stepCounterDOMElem: HTMLElement|null = null;\n\n  constructor(\n    private agent: Agent,\n    private maze: AbstractMazeCell[][],\n    private cellDim: number,\n    private cellSize: number,\n    private cellPadding: number\n  ) {\n    this.cellStriding = cellSize + cellPadding;\n    this.svgSize = cellDim*(this.cellStriding) + cellPadding;\n  }\n\n  private setup() {\n    this.svg = d3.select('.App')\n      .append('svg')\n      .attr('width', this.svgSize)\n      .attr('height', this.svgSize)\n      .style('background-color', 'gray');\n\n    this.stepCounterDOMElem = document.getElementById('stepCounter');\n  }\n\n  private draw() {\n    if(this.svg === null)\n      throw new Error('Svg is null! Is setup called before draw?');\n    if(this.stepCounterDOMElem === null)\n      throw new Error('stepCounter DOM Element is null! Is setup called before draw?');\n\n    this.stepCounterDOMElem.innerHTML = this.stepCounter.toString();\n\n    this.svg.selectAll(\"*\").remove();\n      \n    const columns = this.svg\n      .selectAll('g')\n      .data(this.maze)\n      .enter()\n      .append('g')\n      .attr('width', 10)\n\n    columns\n      .attr('transform', (d,i) => translate(this.cellStriding*i + this.cellPadding, this.cellPadding))\n\n    const cellGroup = columns\n      .selectAll('g')\n      .data(d => d)\n      .enter()\n      .append('g')\n      .attr('transform', (d,i) => translate(0, this.cellStriding*i))\n      \n    const cellRect = cellGroup.append('rect')\n      .attr('width', this.cellSize)\n      .attr('height', this.cellSize)\n      .attr('fill', d => d.getColor(this.viewMode))\n\n    const triangleSelection = columns\n      .selectAll('polygon')\n      .data(d => d)\n      .enter()\n      \n    // Draw triangles\n    const westTriangle = cellGroup\n      .append('polygon')\n      .attr('points', d => westTrianglePoints(this.cellSize))\n      .attr('fill', d => d.getTriangleColor(this.viewMode, 'west'))\n      .attr(\"visibility\", d => visibility(d.showTriangles(this.viewMode)));\n\n    const northTriangle = cellGroup\n      .append('polygon')\n      .attr('points', d => northTrianglePoints(this.cellSize))\n      .attr('fill', d => d.getTriangleColor(this.viewMode, 'north'))\n      .attr(\"visibility\", d => visibility(d.showTriangles(this.viewMode)));\n\n    const eastTriangle = cellGroup\n      .append('polygon')\n      .attr('points', d => eastTrianglePoints(this.cellSize))\n      .attr('fill', d => d.getTriangleColor(this.viewMode, 'east'))\n      .attr(\"visibility\", d => visibility(d.showTriangles(this.viewMode)));\n\n    const southTriangle = cellGroup\n      .append('polygon')\n      .attr('points', d => southTrianglePoints(this.cellSize))\n      .attr('fill', d => d.getTriangleColor(this.viewMode, 'south'))\n      .attr(\"visibility\", d => visibility(d.showTriangles(this.viewMode)));\n\n    // Draw agent\n    const agentCircle = this.svg\n      .append('circle')\n      .attr('r', this.cellSize/2.2)\n      .attr('cx',this.cellPadding + this.agent.state.x*this.cellStriding + this.cellSize/2)\n      .attr('cy', this.cellPadding + this.agent.state.y*this.cellStriding + this.cellSize/2)\n      .attr('fill', 'green')\n  }\n\n  private update() {\n    this.stepCounter++;\n\n    if(this.doStartNewEpisode) {\n      this.doStartNewEpisode = false;\n      this.agent.resetPosition();\n    }\n    \n    if(this.doTimeTravel) {\n      this.doTimeTravel = false;\n      for(let i = 0; i<10000; i++) {\n        this.stepCounter++;\n        this.agent.doStep();\n      } \n    }\n    \n    this.agent.doStep();\n  }\n\n  public async start() {\n    this.setup();\n\n    while(true) {\n      this.update();\n      await sleep(30);\n      this.draw();\n    }\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport * as d3 from 'd3';\n\nimport {Agent} from './Agent';\nimport {translate, sleep, ViewMode, visibility} from './Utils';\nimport {constructMaze, AbstractMazeCell, SolidMazeCell} from './Maze';\nimport { RenderHandler } from './RenderHandler';\n\n\n\nclass App extends React.PureComponent {\n\n  private renderHandler: RenderHandler;\n\n  constructor() {\n    super({});\n\n    const mazeStr = [\n      '....#..........€',\n      '....##..########',\n      '........#.......',\n      '##  #########...',\n      '............#..#',\n      '....#......##..#',\n      '#####......#....',\n      '.......#####....',\n      '.......#......#.',\n      '...#.........##.',\n      '###########.....',\n      '...#............',\n      '...###...#######',\n      '.....#..........',\n      '.....#######....',\n      '$...............',\n    ];\n    \n    const {maze, agent} = constructMaze(mazeStr);\n    \n    this.renderHandler = new RenderHandler(\n      agent,\n      maze,\n      16,\n      30,\n      2\n    )\n    \n    console.log(maze)\n    console.log(agent);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>\n          RL Playground\n        </h1>\n        \n        <select onChange={(event) => {this.renderHandler.viewMode = event.target.options[event.target.selectedIndex].text as ViewMode}}>\n          <option>value</option>\n          <option>reward</option>\n          <option>simple</option>\n          <option>policy</option>\n          <option>q-function</option>\n        </select>\n        \n        <button type=\"button\" onClick={() => this.renderHandler.doTimeTravel = true}>\n          time travel\n        </button>\n        <button type=\"button\" onClick={() => this.renderHandler.doStartNewEpisode = true}>\n          reset\n        </button>\n        \n        <p id=\"stepCounter\">\n          756\n        </p>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.renderHandler.start().then();\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Utils.ts","Agent.ts","Algorith.ts","State.ts","RenderHandler.ts","MazeCellRenderer.ts","App.tsx","Maze.ts","serviceWorker.ts","index.tsx"],"names":["sleep","milliseconds","Promise","resolve","setTimeout","chooseRandomArrayElement","a","len","length","Math","floor","random","range","stop","out","i","push","viewModeList","directionList","Directional","directionValues","this","d","value","maxValue","max","map","direction","filter","directionValue","Agent","startState","algorithm","state","oldState","action","chooseAction","newState","getNeighbor","reward","afterAction","TemporalDifferenceLearning","discountFactor","learningRate","explorationFactor","iteration","reductionFactor","neighbors","forEach","nextState","set","Number","NEGATIVE_INFINITY","getMaximum","policy","console","log","updateReductionFactor","chooseRandomAction","chooseGreedyAction","newVal","State","stateTensor","_x","_y","_t","isValid","q","newPos","x","y","t","Error","newX","newY","newT","neighbor","get","StateTensor","maxX","maxY","maxTimer","stateBuilder","state3DList","Array","fill","_","modT","RenderHandler","agent","cellDim","cellSize","cellPadding","mazeCellRenderer","onTimeTravelProgressChange","cellStriding","canvasSize","halfCellSize","ctx","travelTime","doTimeTravel","viewMode","doStartNewEpisode","stepCounter","stepCounterDOMElem","timer","timerDOMElem","positions","as","bs","b","cross","getCellColor","bind","getTriangleVisibility","draw","document","getElementById","canvas","width","height","getContext","getColor","getTriangleColor","showTriangles","pos","unsafeGet","resetTransform","translate","fillStyle","beginPath","moveTo","lineTo","closePath","fillRect","arc","PI","window","requestAnimationFrame","doStep","progress","updateHTML","innerHTML","toString","setup","update","MyMazeCellRenderer","linScale","d3","domain","powerScale","pow","itNumHalf","itNum","acc","FlexContainer","children","className","style","display","justifyContent","App","props","renderHandler","mazeStr","startPos","targetPositions","char","charAt","numberOfTargets","tX","tY","sX","sY","constructMaze","setState","timeTravelProgress","vertical","onChange","event","target","options","selectedIndex","text","key","onClick","intent","animate","id","backgroundColor","border","borderRadius","start","then","React","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fe3f594.chunk.js","sourcesContent":["// Helper functions\n\nexport function translate(x: number, y: number): string {\n  return `translate(${x},${y})`\n}\n\nexport function visibility(visibility: boolean) {\n  return visibility ? 'visible' : 'hidden';\n}\n\nexport function sleep(milliseconds: number): Promise<void> {\n   return new Promise(resolve => setTimeout(resolve, milliseconds));\n}\n\nexport function L2Norm(x: number, y: number): number {\n  return Math.sqrt(x*x + y*y);\n}\n\nexport function chooseRandomArrayElement<T>(a: T[]): T {\n  const len = a.length;\n  const idx = Math.floor(Math.random() * len);\n  return a[idx];\n}\n\nexport function range(stop: number): number[] {\n  const out: number[] = [];\n  for(let i=0; i<stop; i++) {\n    out.push(i)\n  }\n  return out;\n}\n\nexport function cross<A,B>(as: A[], bs: B[]): [A,B][] {\n  const out: [A,B][] = [];\n  for(let a of as) {\n    for(let b of bs) {\n      out.push([a,b]);\n    }\n  }\n  return out;\n}\n\nexport const viewModeList = ['reward' , 'value' , 'q-function' , 'policy'] as ['reward' , 'value' , 'q-function' , 'policy'];\nexport type ViewMode = typeof viewModeList[number];\n\nexport const directionList = ['north' , 'east' , 'west' , 'south'] as ['north' , 'east' , 'west' , 'south'];\nexport type Direction = typeof directionList[number];\n\n\nexport class Directional {\n  private directionValues: {[direction in Direction]: number};\n\n  constructor() {\n    this.directionValues = {'north': 0, 'east': 0, 'south': 0, 'west': 0};\n  }\n\n  get(d: Direction): number {\n    return this.directionValues[d];\n  }\n  set(d: Direction, value: number): void {\n    this.directionValues[d] = value;\n  }\n\n  getMaximum(): {direction: Direction, directionValue: number} {\n    const maxValue = Math.max(...directionList.map(d => this.directionValues[d]));\n    const maxDirection = chooseRandomArrayElement(directionList.filter(d => this.directionValues[d] === maxValue));\n    \n    return {\n      direction: maxDirection,\n      directionValue: maxValue\n    }\n  }\n}\n","import { Algorithm } from './Algorith';\nimport { State } from './State';\n\nexport class Agent {\n  public state: State;\n\n  constructor(\n    startState: State,\n    private algorithm: Algorithm\n  ) {\n    this.state = startState;\n  }\n   \n  doStep() {\n    const oldState = this.state;\n    const action = this.algorithm.chooseAction(this.state);\n    const newState = this.state.getNeighbor(action) ?? this.state;\n    const reward = newState.reward;\n\n    this.state = newState;\n\n    this.algorithm.afterAction(oldState, action, reward, newState)\n  }\n}","import { directionList, chooseRandomArrayElement, Direction, Directional } from './Utils';\nimport { State } from './State';\n\n\n\nexport interface Algorithm {\n  chooseAction(state: State): Direction;\n  afterAction(oldState: State, action: Direction, reward: number, newState: State): void;\n  startNewEpisode(): void;\n  endEpisode(): void;\n}\n\n\nexport class TemporalDifferenceLearning implements Algorithm {\n\n  private iteration = 0;\n  private reductionFactor = 1;\n\n  constructor(\n    private discountFactor: number,\n    private learningRate: number,\n    private explorationFactor: number = 1,\n  ) {}\n\n  //\n  // ─── PRIVATE METHODS ────────────────────────────────────────────────────────────\n  //\n\n  private chooseGreedyAction(state: State): Direction {\n\n    const neighbors = new Directional();\n    directionList.forEach(d => {\n      const nextState = state.getNeighbor(d);\n      neighbors.set(d, nextState?.value ?? Number.NEGATIVE_INFINITY)\n    })\n\n    const action = neighbors.getMaximum().direction;\n    state.policy = action;\n    return action;\n  }\n  \n  private chooseRandomAction(): Direction {\n    return chooseRandomArrayElement(directionList);\n  }\n\n  private updateReductionFactor() {\n    this.iteration++;\n    this.reductionFactor *= 0.99999956;\n    if(this.iteration % 1000000 === 0) {\n      console.log('reductionFactor', this.reductionFactor);\n    }\n  }\n  \n  //\n  // ─── PUBLIC METHODS ─────────────────────────────────────────────────────────────\n  //\n\n  chooseAction(state: State): Direction {\n    this.updateReductionFactor();\n    if(Math.random() < this.explorationFactor*this.reductionFactor) {\n      return this.chooseRandomAction();\n    } else {\n      return this.chooseGreedyAction(state);\n    }\n  }\n\n  /**\n   * \n   * @param oldState state before taking action\n   * @param action action taken\n   * @param reward reward yielded by taking the action\n   * @param newState state after taking action\n   */\n  afterAction(oldState: State, action: Direction, reward: number, newState: State) {\n\n    const newVal = (1-this.learningRate)*oldState.value + \n      this.learningRate*(\n        newState.reward +\n        this.discountFactor*newState.value\n      )\n    \n    oldState.value = newVal;\n  }\n\n  startNewEpisode() {}\n\n  endEpisode() {}\n\n}","import { Direction, directionList, chooseRandomArrayElement, Directional } from './Utils';\n\nexport class State {\n\n  constructor(\n    private stateTensor: StateTensor,\n    \n    private _x: number,\n    private _y: number,\n    private _t: number,\n\n    public isValid: boolean,\n\n    public reward: number,\n    public value: number,\n    public q: Directional,\n    public policy: Direction\n  ) {}\n\n  get t() {\n    return this._t;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n\n  /**\n   * Returning the neighbor state according to the given direction.\n   * `null` is returned if there is no neighbor inside the stateTensor or the neighbor is not valid\n   */\n  getNeighbor(direction: Direction): State|null {\n    let newPos;\n    const x = this._x;\n    const y = this._y;\n    const t = this._t;\n    switch(direction) {\n      case 'north':\n        newPos = [x, y-1, t+1];\n        break;\n      case 'east':\n        newPos = [1+x, y, t+1];\n        break;\n      case 'south':\n        newPos = [x, y+1, t+1];\n        break;\n      case 'west':\n        newPos = [x-1, y, t+1];\n        break;\n      default:\n        throw new Error(`Unknown direction: ${direction}`)\n    }\n    \n    const [newX,newY,newT] = newPos;\n    const neighbor = this.stateTensor.get(newX, newY, newT);\n\n    if (neighbor === null) {\n      return null;\n    }\n    \n    if(!neighbor.isValid)\n      return null;\n      \n    return neighbor;\n  }\n}\n\n\nexport type StateBuilder = (x: number, y: number, t: number) => ({\n  isValid?: boolean,\n  reward?: number,\n  value?: number,\n  q?: Directional,\n  policy?: Direction \n})\n\ntype State3DList = State[][][];\nexport class StateTensor {\n\n  private state3DList: State3DList;\n\n  constructor(\n    private maxX: number,\n    private maxY: number,\n    private maxTimer: number,\n    stateBuilder: StateBuilder\n  ) {\n    \n    this.state3DList = \n      new Array(maxX    ).fill(null).map((_,x) => \n      new Array(maxY    ).fill(null).map((_,y) => \n      new Array(maxTimer).fill(null).map((_,t) => {\n        const {\n          isValid,\n          reward,\n          value,\n          policy,\n          q\n        } = stateBuilder(x,y,t);\n        return new State(\n          this,\n          x,y,t,\n          isValid ?? true,\n          reward  ?? 0,\n          value   ?? 0,\n          q       ?? new Directional(),\n          policy  ?? chooseRandomArrayElement(directionList)\n        )}\n      )))\n  }\n\n  get(x: number, y: number, t: number): State|null {\n\n    // Check if x,y in bounds\n    if(0 <= x && x < this.maxX &&\n       0 <= y && y < this.maxY) {\n      const modT = ((t % this.maxTimer)+this.maxTimer) % this.maxTimer; // Map t to [0,maxTimer) interval\n      return(this.state3DList[x][y][modT])\n      \n    } else {\n      return null\n    }\n\n    \n  }\n\n  unsafeGet(x: number, y: number, t: number): State {\n\n    const state = this.get(x,y,t);\n    if(state === null) {\n      throw new Error(`Could not return state for (x,y,t)=(${x},${y},${t})`)\n    }\n\n    return state;\n  }\n}","import { ViewMode, sleep, Direction, directionList, cross, range, viewModeList } from './Utils';\nimport { Agent } from './Agent';\nimport { State, StateTensor } from './State';\nimport { MazeCellRenderer } from './MazeCellRenderer';\n\n\nexport class RenderHandler {\n  private cellStriding: number;\n  private canvasSize: number;\n  private halfCellSize: number;\n\n  private ctx: CanvasRenderingContext2D|null = null;\n\n  private travelTime = 5_000_000; \n  public doTimeTravel =  false;\n  public viewMode: ViewMode = viewModeList[0];\n  public doStartNewEpisode =  false;\n  \n  private stepCounter = 0;\n  private stepCounterDOMElem: HTMLElement|null = null;\n\n  private timer = 0;\n  private timerDOMElem: HTMLElement|null = null;\n\n  private positions: [number, number][];\n\n\n  constructor(\n    private agent: Agent,\n    private stateTensor: StateTensor,\n    cellDim: number,\n    private cellSize: number,\n    private cellPadding: number,\n    private mazeCellRenderer: MazeCellRenderer,\n    private onTimeTravelProgressChange?: (t: number) => void\n  ) {\n    this.cellStriding = cellSize + cellPadding;\n    this.canvasSize = cellDim*(this.cellStriding) + cellPadding;\n    this.positions = cross(range(cellDim), range(cellDim));\n\n    this.halfCellSize = cellSize/2;\n\n    this.getCellColor = this.getCellColor.bind(this);\n    this.getTriangleVisibility = this.getTriangleVisibility.bind(this);\n    this.draw = this.draw.bind(this);\n  }\n\n  private setup() {\n\n    this.stepCounterDOMElem = document.getElementById('stepCounter');\n    this.timerDOMElem = document.getElementById('timer');\n\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n    canvas.width = this.canvasSize;\n    canvas.height = this.canvasSize;\n    this.ctx = canvas.getContext('2d');\n  }\n\n  private getCellColor(state: State): string {\n    return this.mazeCellRenderer.getColor(this.viewMode, state);\n  }\n\n  private getTriangleColor(direction: Direction, state: State): string {\n    return this.mazeCellRenderer.getTriangleColor(this.viewMode, direction, state);\n  }\n\n  private getTriangleVisibility(state: State): boolean {\n    return this.mazeCellRenderer.showTriangles(this.viewMode, state);\n  }\n\n  private draw() {\n\n    if(this.ctx === null)\n      throw new Error('canvas 2d context is null! Is setup called before draw?');\n\n    this.timer = this.agent.state.t;\n\n    for(let pos of this.positions) {\n      const [x,y] = pos;\n      const state = this.stateTensor.unsafeGet(x, y, this.timer);\n\n      this.ctx.resetTransform()\n      this.ctx.translate(this.cellStriding*x + this.cellPadding, this.cellStriding*y + this.cellPadding);\n\n      const showTriangles = this.getTriangleVisibility(state);\n\n      if(showTriangles) {\n\n        for(let direction of directionList) {\n          this.ctx.fillStyle = this.getTriangleColor(direction, state);\n          this.ctx.beginPath();\n          this.ctx.moveTo(this.halfCellSize, this.halfCellSize);\n\n          switch(direction) {\n            case 'north':\n              this.ctx.lineTo(0, 0);\n              this.ctx.lineTo(this.cellSize, 0);\n              break;\n            case 'east':\n              this.ctx.lineTo(this.cellSize, 0);\n              this.ctx.lineTo(this.cellSize, this.cellSize);\n              break;\n            case 'south':\n              this.ctx.lineTo(this.cellSize, this.cellSize);\n              this.ctx.lineTo(0, this.cellSize);\n              break;\n            case 'west':\n              this.ctx.lineTo(0, this.cellSize);\n              this.ctx.lineTo(0, 0);\n              break;\n          }\n\n          this.ctx.closePath();\n          this.ctx.fill();\n        }\n      } else {\n        this.ctx.fillStyle = this.getCellColor(state);\n        this.ctx.fillRect(0,0, this.cellSize, this.cellSize);\n      }\n    }\n\n    this.ctx.resetTransform()\n    this.ctx.translate(\n      this.cellPadding + this.agent.state.x*this.cellStriding + this.cellSize/2,\n      this.cellPadding + this.agent.state.y*this.cellStriding + this.cellSize/2\n    );\n\n    this.ctx.fillStyle = 'green';\n    this.ctx.beginPath();\n    this.ctx.arc(0, 0, this.cellSize/2.2, 0, 2 * Math.PI);\n    this.ctx.fill();\n\n    window.requestAnimationFrame(this.draw);\n  }\n\n  private async update() {\n    this.stepCounter++;\n\n    if(this.doStartNewEpisode) {\n      this.doStartNewEpisode = false;\n      // TODO: this.agent.resetPosition();\n    }\n    \n    if(this.doTimeTravel) {\n      this.doTimeTravel = false;\n      for(let i = 0; i<this.travelTime; i++) {\n        this.stepCounter++;\n        this.agent.doStep();\n        const progress = i/this.travelTime;\n        if(progress%0.01 < 0.0000001) {\n          this.onTimeTravelProgressChange?.(progress);\n          this.updateHTML()\n          await sleep(1);\n        }\n      }\n      this.onTimeTravelProgressChange?.(0);\n    }\n    \n    this.agent.doStep();\n  }\n\n  private updateHTML() {\n    if(this.stepCounterDOMElem === null)\n      throw new Error('stepCounter DOM Element is null! Is setup called before draw?');\n    if(this.timerDOMElem === null)\n      throw new Error('timer DOM Element is null! Is setup called before draw?');\n\n    this.stepCounterDOMElem.innerHTML = this.stepCounter.toString();\n    this.timerDOMElem.innerHTML = this.timer.toString();\n  }\n\n  public async start() {\n    this.setup();\n\n    window.requestAnimationFrame(this.draw);\n\n    while(true) {\n      await this.update();\n      this.updateHTML()\n      await sleep(40);\n      // break;\n    }\n  }\n}","import { ViewMode, Direction } from './Utils';\nimport { State, StateTensor } from './State';\nimport * as d3 from 'd3';\n\nexport interface MazeCellRenderer {\n  getColor(viewMode: ViewMode, state: State): string\n  getTriangleColor(viewMode: ViewMode, direction: Direction, state: State): string\n  showTriangles(viewMode: ViewMode, state: State): boolean\n}\n\nexport class MyMazeCellRenderer implements MazeCellRenderer {\n\n  private linScale = d3.scaleSequential(d3.interpolatePuOr).domain([0,1]);\n  private powerScale = (t: number) => d3.scaleSequential(d3.interpolatePuOr).domain([0,1])(Math.pow(t, 1/10));\n\n  constructor(private stateTensor: StateTensor) {}\n\n  getColor(viewMode: ViewMode, state: State) {  \n    if(!state.isValid) {\n      return '#777';\n    }\n\n    switch(viewMode){\n      case 'reward':\n        return this.powerScale(state.reward);\n      case 'value':\n        return this.powerScale(state.value);\n      case 'policy':\n      case 'q-function':\n        return 'red';\n    }\n  }\n\n  getTriangleColor(viewMode: ViewMode, direction: Direction, state: State) {\n\n    if(!state.isValid){\n      return '#777';\n    }\n\n    switch(viewMode) {\n      case 'policy':\n        const itNum = 20;\n        const itNumHalf = Math.floor(itNum/2);\n        let acc = 0;\n        const {x, y, t} = state;\n        for(let i = 0; i < itNum; i++) {\n          acc += this.stateTensor.unsafeGet(x,y,t+i-itNumHalf).policy === direction ? 1 : 0\n        }\n        return this.linScale(acc/itNum);\n        // return direction === state.policy ? '#222' : '#eee';\n      case 'q-function':\n        return this.linScale(state.q.get(direction));\n      case 'reward':\n      case 'value':\n        return 'red';\n    }\n  }\n\n  showTriangles(viewMode: ViewMode, state: State) {\n\n    if(!state.isValid){\n      return false;\n    }\n\n    switch(viewMode) {\n      case 'policy':\n      case 'q-function':\n        return true;\n      case 'reward':\n      case 'value':\n        return false;\n    }\n  }\n}","import React from 'react';\nimport { Button, ControlGroup, ProgressBar } from '@blueprintjs/core';\nimport './App.css';\n\nimport {ViewMode, viewModeList} from './Utils';\nimport {constructMaze} from './Maze';\nimport { RenderHandler } from './RenderHandler';\nimport { MyMazeCellRenderer } from './MazeCellRenderer';\n\n\nconst FlexContainer: React.SFC<{width?: string|number}> = ({width, children}) => (\n  <div\n    className=\"FlexContainer\"\n    style={{\n      display: 'flex',\n      justifyContent: 'center',\n      width: '100%'\n    }}\n  >\n    <div style={{width}}>\n      {children}\n    </div>\n  </div>\n)\n\n\n// A simple maze\n// =========================\n// [\n//   '....#..........€',\n//   '....##..########',\n//   '........#.......',\n//   '##  #########...',\n//   '............#..#',\n//   '....#......##..#',\n//   '#####......#....',\n//   '.......#####....',\n//   '.......#......#.',\n//   '...#.........##.',\n//   '###########.....',\n//   '...#............',\n//   '...###...#######',\n//   '.....#..........',\n//   '.....#######....',\n//   '$...............',\n// ];\n\n// To complex structure\n// =========================\n// [\n//   '.........#......',\n//   '.........#......',\n//   '..........#€....',\n//   '...######.###...',\n//   '...#....#...#...',\n//   '...#.....#..#...',\n//   '...#..##....#...',\n//   '...#.########...',\n//   '...#..##....#...',\n//   '...#..$#€.#.#...',\n//   '...#...####.#...',\n//   '...#........#...',\n//   '...##########...',\n//   '................',\n//   '................',\n//   '................',\n// ];\n\n// Three targets. not enough time for traveling => interesting moves\n// =========================\n// [\n//   '.........#......',\n//   '.........#......',\n//   '.........#.€....',\n//   '...#####.####...',\n//   '...#........#...',\n//   '...#........#...',\n//   '...#..##...€#...',\n//   '...#.########...',\n//   '...#..##....#...',\n//   '...#..$.....#...',\n//   '...#......€.#...',\n//   '...#........#...',\n//   '...##########...',\n//   '................',\n//   '................',\n//   '................',\n// ];\n\n\n\nclass App extends React.Component<{},{timeTravelProgress: number}> {\n\n  private renderHandler: RenderHandler;\n\n  constructor(props: {}) {\n    super(props);\n\n    const mazeStr = [\n      '.........#......',\n      '.........#......',\n      '.........#.€....',\n      '...#####.####...',\n      '...#........#...',\n      '...#........#...',\n      '...#..##....#...',\n      '...#.########...',\n      '...#..##....#...',\n      '...#..$.....#...',\n      '...#......€.#...',\n      '...#........#...',\n      '...##########...',\n      '................',\n      '................',\n      '................',\n    ];\n    \n    const {stateTensor, agent} = constructMaze(mazeStr);\n    \n    this.renderHandler = new RenderHandler(\n      agent,\n      stateTensor,\n      16,\n      30,\n      2,\n      new MyMazeCellRenderer(stateTensor),\n      (t) => {this.setState({timeTravelProgress: t});}\n    )\n    \n    console.log(stateTensor)\n    console.log(agent);\n\n    this.state = {\n      timeTravelProgress: 0\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App bp3-dark\">\n        <h1>\n          RL Playground\n        </h1>\n        \n        \n        <FlexContainer>\n          <ControlGroup fill={false} vertical={false} >\n            <div className=\"bp3-select\">\n              <select onChange={(event) => {this.renderHandler.viewMode = event.target.options[event.target.selectedIndex].text as ViewMode}}>\n                {viewModeList.map(\n                  viewMode =>\n                  <option key={viewMode}>{viewMode}</option>\n                )}\n              </select>\n            </div>\n        \n            <Button\n              text=\"time travel\"\n              onClick={() => this.renderHandler.doTimeTravel = true}\n            />\n            {/* <Button\n              text=\"reset\"\n              onClick={() => this.renderHandler.doStartNewEpisode = true}\n            /> */}\n          </ControlGroup>\n          \n        </FlexContainer>\n\n        <br/>\n        <FlexContainer width={300}>\n            <ProgressBar\n              value={this.state.timeTravelProgress}\n              intent=\"success\"\n              animate={false}\n            />\n        </FlexContainer>\n       \n        {/* <Divider/> */}\n        <p>\n          <br/>\n          iteration: <i id=\"stepCounter\"></i>\n          <br/>\n          timer: <i id=\"timer\">55</i>\n        </p>\n\n        <canvas id=\"canvas\" style={{\n          backgroundColor: '#354553',\n          border: 'thick double rgb(64, 95, 112)',\n          borderRadius: 6\n        }}></canvas>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.renderHandler.start().then();\n  }\n}\n\n\nexport default App;\n","import {Agent} from './Agent';\nimport { TemporalDifferenceLearning } from './Algorith';\nimport { StateTensor, StateBuilder } from './State';\n\n\nexport function constructMaze(mazeStr: string[]): {stateTensor: StateTensor, agent: Agent} {\n  let startPos = [0,0];\n  let targetPositions: [number,number][] = [];\n  const cellDim = 16;\n\n  const map: (string|null)[][] = new Array(cellDim).fill(null).map(\n    (_) => new Array(cellDim).fill(null));\n  \n  for(let x = 0; x < 16; x++){\n    for(let y = 0; y < 16; y++) {\n      const char = mazeStr[y].charAt(x);\n      map[x][y] = char;\n      \n      if (char === '€')\n        targetPositions.push([x,y]);\n      \n      if(char === '$')\n        startPos = [x,y];\n    }\n  }\n\n  const numberOfTargets = targetPositions.length;\n  const maxTimer = 179;\n  const stateBuilder: StateBuilder = (x, y, t) => {\n    const char = map[x][y];\n\n    const [tX, tY] = targetPositions[Math.floor(t*numberOfTargets/maxTimer)];\n\n    return {\n      isValid: char !== '#',\n      reward:  x===tX && y===tY ? 1 : 0, // 1 - L2Norm(x-tX, y-tY)/L2Norm(16,16)\n      value: 5 // initializing with a high/optimistic value yields to faster convergence\n    }\n  }\n  \n  const stateTensor = new StateTensor(16, 16, maxTimer, stateBuilder);\n\n  const [sX, sY] = startPos;\n  const startState = stateTensor.unsafeGet(sX, sY, 0)\n  \n  const agent = new Agent(\n    startState,\n    new TemporalDifferenceLearning(0.3, 0.5)\n  );\n  \n  return {stateTensor, agent};  \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}